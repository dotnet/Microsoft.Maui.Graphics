variables:
  BuildVersion: $[counter('release-counter', 1)]
  IsRunningOnCI: true
  DotNet.Version: 6.0.100-preview.7.21379.14
  DotNet.Cli.Telemetry.OptOut: true
  MauiCheck.Version: 0.6.7
  Maui.Version: ''
  Tizen.Version: 6.5.100-preview.5.57

parameters:
  - name: BuildConfigurations
    type: object
    default:
      - Debug
      - Release

trigger:
  branches:
    include:
    - main
    - release/*
  tags:
    include:
    - '*'
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

pr:
  branches:
    include:
    - main
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

resources:
  repositories:
    - repository: xamarin-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
      ref: refs/heads/main # still defaults to master even though main is the main branch

stages:
  - stage: windows
    displayName: Build Windows
    jobs:
      - ${{ each BuildConfiguration in parameters.BuildConfigurations }}:
        - job: win_hosted_${{ BuildConfiguration }}
          workspace:
            clean: all
          displayName: Build Windows Phase (${{ BuildConfiguration }})
          timeoutInMinutes: 60
          pool:
            vmImage:  windows-latest
          steps:
            - pwsh: |
                $ProgressPreference = 'SilentlyContinue'
                Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
                & .\dotnet-install.ps1 -Version $(DotNet.Version) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
                & dotnet --list-sdks
              displayName: install .NET $(DotNet.Version)
              errorActionPreference: stop

            - pwsh: dotnet tool restore
              displayName: install dotnet tools

            - pwsh:
                dotnet boots --url https://workload-bin.s3.ap-northeast-2.amazonaws.com/windows/Samsung.NET.Workload.Tizen.$(Tizen.Version).msi
              displayName: install tizen

            - pwsh: |
                # Update the installer installer
                Invoke-WebRequest -UseBasicParsing -Uri "https://aka.ms/vs/install/latest/vs_setup.exe" -OutFile vs_setup.exe
                & .\vs_setup.exe --update --quiet --wait | Out-Null

                dotnet vs install preview Enterprise +core +mobile +desktop +uwp --quiet
                dotnet vs where
              displayName: update vs

            - pwsh: |
                & dotnet tool update --global redth.net.maui.check --version $(MauiCheck.Version) --add-source https://api.nuget.org/v3/index.json
                & maui-check $(Maui.Version) --ci --non-interactive --fix --skip androidsdk --skip xcode --skip vswin --skip vsmac --skip edgewebview2
              displayName: maui-check
              errorActionPreference: stop

            - pwsh: |
                $vs = & dotnet vs where --preview --prop=InstallationPath
                $msbuild = "$vs\MSBuild\Current\Bin\MSBuild.exe"
                & $msbuild /r ./build/Build.Microsoft.Maui.Graphics.Windows.sln /p:Configuration=${{ BuildConfiguration }} /bl:$(Build.ArtifactStagingDirectory)/${{ BuildConfiguration }}.binlog
              displayName: build classic solutions

            - pwsh: |
                $vs = & dotnet vs where --preview --prop=InstallationPath
                $msbuild = "$vs\MSBuild\Current\Bin\MSBuild.exe"
                & $msbuild /r ./Microsoft.Maui.Graphics-net6.sln /p:Configuration=${{ BuildConfiguration }} /bl:$(Build.ArtifactStagingDirectory)/${{ BuildConfiguration }}-net6.binlog
              displayName: build net6 solutions

            - task: NuGetCommand@2
              displayName: 'Pack nupkg'
              inputs:
                command: 'pack'
                packagesToPack: '**\\Microsoft.Maui.*.nuspec'
                packDestination: '$(Build.ArtifactStagingDirectory)/${{ BuildConfiguration }}'
                configuration: ${{ BuildConfiguration }}
                basePath: '$(System.DefaultWorkingDirectory)'
                versioningScheme : 'byEnvVar'
                versionEnvVar: 'BUILD_BUILDNUMBER'

            - task: CopyFiles@2
              displayName: 'Copy SignList.xml and Packages'
              inputs:
                Contents: |
                  **/SignList.xml
                TargetFolder: '$(Build.ArtifactStagingDirectory)/${{ BuildConfiguration }}'
                flattenFolders: true

            - task: PublishBuildArtifacts@1
              condition: always()
              displayName: publish artifacts
              inputs:
                ArtifactName: nuget

  # only sign using the private server
  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - stage: nuget_signing
      dependsOn: windows
      displayName: Sign Nuget
      jobs:
        - template: sign-artifacts/jobs/v2.yml@xamarin-templates
          parameters:
            signType: Real
            teamName: Maui
            usePipelineArtifactTasks: false
            targetFolder: $(Build.ArtifactStagingDirectory)/nuget/signed
            artifactPath: release
            signedArtifactName: nuget
            signedArtifactPath: signed
            displayName: Sign Phase
            condition: and(succeeded(), or(eq(variables['Sign'], 'true'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), or(startsWith(variables['Build.SourceBranch'],'refs/tags/'),  startsWith(variables['Build.SourceBranch'],'refs/heads/release/') ))))
