using System;

namespace Elevenworks.Graphics
{
    public class EWVector
    {
        // ------------------------------------------------------------------------------------------------------------------------
        // Fields
        // ------------------------------------------------------------------------------------------------------------------------
        private float _u;
        private float _v;

        // ------------------------------------------------------------------------------------------------------------------------
        // Constructors
        // ------------------------------------------------------------------------------------------------------------------------		
        public EWVector()
        {
            _u = 0;
            _v = 0;
        }

        public EWVector(float aU, float aV)
        {
            _u = aU;
            _v = aV;
        }

        // ------------------------------------------------------------------------------------------------------------------------
        // Properties
        // ------------------------------------------------------------------------------------------------------------------------				
        public float U
        {
            get => _u;
            set => _u = value;
        }

        public float V
        {
            get => _v;
            set => _v = value;
        }

        // ------------------------------------------------------------------------------------------------------------------------
        // Public Methods
        // ------------------------------------------------------------------------------------------------------------------------		

        public override string ToString()
        {
            return string.Format("[EWVector: U={0}, V={1}]", _u, _v);
        }

        public override bool Equals(object obj)
        {
            var vCompareTo = obj as EWVector;
            if (vCompareTo != null)
            {
                return Math.Abs(vCompareTo.U - _u) < Geometry.Epsilon && Math.Abs(vCompareTo.V - _v) < Geometry.Epsilon;
            }

            return false;
        }

        public override int GetHashCode()
        {
            return (int) _u ^ (int) _v;
        }

        // ------------------------------------------------------------------------------------------------------------------------
        // Private, Internal and Protected Methods
        // ------------------------------------------------------------------------------------------------------------------------		
    }
}