!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);var i;!function(e){const t="BlazorExtensions",n={Canvas2d:new r.ContextManager("2d"),WebGL:new r.ContextManager("webgl")};e.initialize=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign({},window[t],n):window[t]=Object.assign({},n)}}(i||(i={})),i.initialize()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ContextManager=class{constructor(e){if(this.contexts=new Map,this.webGLObject=new Array,this.webGLContext=!1,this.webGLTypes=[WebGLBuffer,WebGLShader,WebGLProgram,WebGLFramebuffer,WebGLRenderbuffer,WebGLTexture,WebGLUniformLocation],this.add=((e,t)=>{if(!e)throw new Error("Invalid canvas.");if(!this.contexts.get(e.id)){var n;if(!(n=t?e.getContext(this.contextName,t):e.getContext(this.contextName)))throw new Error("Invalid context.");this.contexts.set(e.id,n)}}),this.remove=(e=>{this.contexts.delete(e.id)}),this.setProperty=((e,t,n)=>{this.getContext(e)[t]=this.deserialize(t,n)}),this.getProperty=((e,t)=>{const n=this.getContext(e);return this.serialize(n[t])}),this.call=((e,t,n)=>{const r=this.getContext(e);return this.serialize(this.prototypes[t].apply(r,null!=n?n.map(e=>this.deserialize(t,e)):[]))}),this.getContext=(e=>{if(!e)throw new Error("Invalid canvas.");const t=this.contexts.get(e.id);if(!t)throw new Error("Invalid context.");return t}),this.deserialize=((e,t)=>this.webGLContext?t.hasOwnProperty("webGLType")&&t.hasOwnProperty("id")?this.webGLObject[t.id]:Array.isArray(t)&&!e.endsWith("v")?Int8Array.of(...t):t:t),this.serialize=(e=>{if(!this.webGLContext)return e;const t=this.webGLTypes.find(t=>e instanceof t);if(null!=t){const n=this.webGLObject.length;return this.webGLObject.push(e),{webGLType:t.name,id:n}}return e}),this.contextName=e,"2d"===e)this.prototypes=CanvasRenderingContext2D.prototype;else{if("webgl"!==e&&"experimental-webgl"!==e)throw new Error(`Invalid context name: ${e}`);this.prototypes=WebGLRenderingContext.prototype,this.webGLContext=!0}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,